// <auto-generated />
using System;
using DigitNow.Domain.DocumentManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigitNow.Domain.DocumentManagement.Migrations
{
    [DbContext(typeof(DocumentManagementDbContext))]
    partial class DocumentManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("DocumentManagement")
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Actions.Action", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModificationMotive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Action", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Actions.ActionFunctionary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<long>("FunctionaryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("ActionFunctionaries", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Activities.Activity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GeneralObjectiveId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModificationMotive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<long>("SpecificObjectiveId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GeneralObjectiveId");

                    b.HasIndex("SpecificObjectiveId");

                    b.ToTable("Activity", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Activities.ActivityFunctionary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<long>("FunctionaryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityFunctionary", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.ConnectedDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IncomingDocumentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OutgoingDocumentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("IncomingDocumentId");

                    b.HasIndex("OutgoingDocumentId");

                    b.ToTable("ConnectedDocument", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.ContactDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entrance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactDetail", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.DeliveryDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<int>("DeliveryMode")
                        .HasColumnType("int");

                    b.Property<int>("DirectShipping")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<int>("Post")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DeliveryDetails", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<long>("DestinationDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<long?>("RecipientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RegistrationNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceDestinationDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("StatusModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Document", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.DocumentActions.DocumentAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<long>("ResposibleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentAction", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.DocumentFileMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("DocumentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("UploadedFileMappingId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UploadedFileMappingId");

                    b.ToTable("DocumentFileMappings", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.DocumentResolution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResolutionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DocumentResolution", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.DynamicForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DynamicForm", "DocumentManagement");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Context = "",
                            Description = "description1",
                            Label = "label1",
                            Name = "Formular 1"
                        },
                        new
                        {
                            Id = 2L,
                            Context = "",
                            Description = "description2",
                            Label = "label2",
                            Name = "Formular 2"
                        });
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.DynamicFormField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DynamicFieldType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DynamicFormField", "DocumentManagement");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Context = "",
                            DynamicFieldType = 0,
                            Name = "Input"
                        },
                        new
                        {
                            Id = 2L,
                            Context = "",
                            DynamicFieldType = 1,
                            Name = "Number"
                        },
                        new
                        {
                            Id = 3L,
                            Context = "",
                            DynamicFieldType = 2,
                            Name = "Date"
                        },
                        new
                        {
                            Id = 4L,
                            Context = "",
                            DynamicFieldType = 5,
                            Name = "CountryDropdown"
                        },
                        new
                        {
                            Id = 5L,
                            Context = "",
                            DynamicFieldType = 4,
                            Name = "DistrictDropdown"
                        },
                        new
                        {
                            Id = 6L,
                            Context = "",
                            DynamicFieldType = 3,
                            Name = "CityDropdown"
                        });
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.DynamicFormFieldMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DynamicFormFieldId")
                        .HasColumnType("bigint");

                    b.Property<long>("DynamicFormId")
                        .HasColumnType("bigint");

                    b.Property<string>("InitialValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DynamicFormFieldId");

                    b.HasIndex("DynamicFormId");

                    b.ToTable("DynamicFormFieldMapping", "DocumentManagement");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Context = "",
                            DynamicFormFieldId = 1L,
                            DynamicFormId = 1L,
                            InitialValue = "",
                            Key = "lastName",
                            Label = "Nume",
                            Order = 1,
                            Required = true
                        },
                        new
                        {
                            Id = 2L,
                            Context = "",
                            DynamicFormFieldId = 1L,
                            DynamicFormId = 1L,
                            InitialValue = "",
                            Key = "firstName",
                            Label = "Prenume",
                            Order = 2,
                            Required = true
                        },
                        new
                        {
                            Id = 3L,
                            Context = "",
                            DynamicFormFieldId = 2L,
                            DynamicFormId = 1L,
                            InitialValue = "7",
                            Key = "resolutionPeriod",
                            Label = "Termen Solutionare",
                            Order = 3,
                            Required = false
                        },
                        new
                        {
                            Id = 4L,
                            Context = "",
                            DynamicFormFieldId = 3L,
                            DynamicFormId = 1L,
                            InitialValue = "",
                            Key = "createdDate",
                            Label = "Data Creare",
                            Order = 4,
                            Required = true
                        },
                        new
                        {
                            Id = 5L,
                            Context = "",
                            DynamicFormFieldId = 1L,
                            DynamicFormId = 2L,
                            InitialValue = "",
                            Key = "observations",
                            Label = "Observatii",
                            Order = 1,
                            Required = true
                        },
                        new
                        {
                            Id = 6L,
                            Context = "",
                            DynamicFormFieldId = 4L,
                            DynamicFormId = 2L,
                            InitialValue = "161",
                            Key = "countryId",
                            Label = "Tara",
                            Order = 2,
                            Required = false
                        },
                        new
                        {
                            Id = 7L,
                            Context = "",
                            DynamicFormFieldId = 6L,
                            DynamicFormId = 2L,
                            InitialValue = "",
                            Key = "cityId",
                            Label = "Oras",
                            Order = 3,
                            Required = false
                        },
                        new
                        {
                            Id = 8L,
                            Context = "",
                            DynamicFormFieldId = 5L,
                            DynamicFormId = 2L,
                            InitialValue = "",
                            Key = "districtId",
                            Label = "Judet",
                            Order = 4,
                            Required = true
                        });
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.DynamicFormFieldValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("DynamicFormFieldMappingId")
                        .HasColumnType("bigint");

                    b.Property<long>("DynamicFormFillingLogId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DynamicFormFieldMappingId");

                    b.HasIndex("DynamicFormFillingLogId");

                    b.ToTable("DynamicFormFieldValue", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.DynamicFormFillingLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<long>("DynamicFormId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("DynamicFormId");

                    b.ToTable("DynamicFormFillingLogs", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.IncomingDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("ContactDetailId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeliveryDetailsId")
                        .HasColumnType("bigint");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint")
                        .HasColumnName("DocumentId")
                        .HasColumnOrder(6);

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ExternalNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExternalNumberDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InputChannelId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsGDPRAgreed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("IssuerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IssuerTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<double>("ResolutionPeriod")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailId");

                    b.HasIndex("DeliveryDetailsId");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.ToTable("IncomingDocument", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.InternalDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<int>("DeadlineDaysNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint")
                        .HasColumnName("DocumentId")
                        .HasColumnOrder(6);

                    b.Property<int>("InternalDocumentTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceDepartmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.ToTable("InternalDocument", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.GeneralObjective", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<long>("ObjectiveId")
                        .HasColumnType("bigint")
                        .HasColumnName("ObjectiveId")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.ToTable("GeneralObjective", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.Objective", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModificationMotive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<int>("ObjectiveType")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Objective", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.SpecificObjective", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("GeneralObjectiveId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<long>("ObjectiveId")
                        .HasColumnType("bigint")
                        .HasColumnName("ObjectiveId")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.HasIndex("GeneralObjectiveId");

                    b.ToTable("SpecificObjective", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.SpecificObjectiveFunctionary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<long>("FunctionaryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<long>("SpecificObjectiveId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SpecificObjectiveId");

                    b.ToTable("SpecificObjectiveFunctionary", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.OutgoingDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ContactDetailId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeliveryDetailsId")
                        .HasColumnType("bigint");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint")
                        .HasColumnName("DocumentId")
                        .HasColumnOrder(6);

                    b.Property<string>("DocumentTypeDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetailId");

                    b.HasIndex("DeliveryDetailsId");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.ToTable("OutgoingDocument", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.SpecialRegister", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<int>("DocumentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentCategoryId")
                        .IsUnique();

                    b.ToTable("SpecialRegister", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.SpecialRegisterMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<long?>("OrderNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("SpecialRegisterId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("SpecialRegisterId");

                    b.ToTable("SpecialRegisterMappings", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.WorkflowHistoryLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<string>("DeclineReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DestinationDepartmentId")
                        .HasColumnType("int");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<int>("DocumentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("OpinionRequestedUntil")
                        .HasColumnType("datetime2");

                    b.Property<long>("RecipientId")
                        .HasColumnType("bigint");

                    b.Property<string>("RecipientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipientType")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Resolution")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("WorkflowHistoryLog", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.UploadedFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AbsolutePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<Guid>("GeneratedName")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UploadedFileMappingId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UploadedFile", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.UploadedFileMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(3);

                    b.Property<long?>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedAt")
                        .HasColumnOrder(4);

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ModifiedBy")
                        .HasColumnOrder(5);

                    b.Property<int>("TargetEntity")
                        .HasColumnType("int");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<long>("UploadedFileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UploadedFileId")
                        .IsUnique();

                    b.ToTable("UploadedFileMapping", "DocumentManagement");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Actions.Action", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Activities.Activity", "AssociatedActivity")
                        .WithMany("Actions")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssociatedActivity");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Actions.ActionFunctionary", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Actions.Action", "Action")
                        .WithMany("ActionFunctionaries")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Activities.Activity", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.GeneralObjective", "AssociatedGeneralObjective")
                        .WithMany("Activities")
                        .HasForeignKey("GeneralObjectiveId")
                        .HasPrincipalKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.SpecificObjective", "AssociatedSpecificObjective")
                        .WithMany("Activities")
                        .HasForeignKey("SpecificObjectiveId")
                        .HasPrincipalKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssociatedGeneralObjective");

                    b.Navigation("AssociatedSpecificObjective");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Activities.ActivityFunctionary", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Activities.Activity", "Activity")
                        .WithMany("ActivityFunctionarys")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.ConnectedDocument", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.IncomingDocument", null)
                        .WithMany("ConnectedDocuments")
                        .HasForeignKey("IncomingDocumentId");

                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.OutgoingDocument", null)
                        .WithMany("ConnectedDocuments")
                        .HasForeignKey("OutgoingDocumentId");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.DocumentActions.DocumentAction", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Document", "Document")
                        .WithMany("DocumentActions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.DocumentFileMapping", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.UploadedFileMapping", "UploadedFileMapping")
                        .WithMany()
                        .HasForeignKey("UploadedFileMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedFileMapping");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.DynamicFormFieldMapping", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.DynamicFormField", "DynamicFormField")
                        .WithMany()
                        .HasForeignKey("DynamicFormFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.DynamicForm", "DynamicForm")
                        .WithMany()
                        .HasForeignKey("DynamicFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicForm");

                    b.Navigation("DynamicFormField");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.DynamicFormFieldValue", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.DynamicFormFieldMapping", "DynamicFormFieldMapping")
                        .WithMany()
                        .HasForeignKey("DynamicFormFieldMappingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.DynamicFormFillingLog", "DynamicFormFillingLog")
                        .WithMany()
                        .HasForeignKey("DynamicFormFillingLogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DynamicFormFieldMapping");

                    b.Navigation("DynamicFormFillingLog");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.DynamicFormFillingLog", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.DynamicForm", "DynamicForm")
                        .WithMany()
                        .HasForeignKey("DynamicFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicForm");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.IncomingDocument", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.ContactDetail", "ContactDetail")
                        .WithMany()
                        .HasForeignKey("ContactDetailId");

                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.DeliveryDetail", "DeliveryDetails")
                        .WithMany()
                        .HasForeignKey("DeliveryDetailsId");

                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Document", "Document")
                        .WithOne("IncomingDocument")
                        .HasForeignKey("DigitNow.Domain.DocumentManagement.Data.Entities.IncomingDocument", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactDetail");

                    b.Navigation("DeliveryDetails");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.InternalDocument", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Document", "Document")
                        .WithOne("InternalDocument")
                        .HasForeignKey("DigitNow.Domain.DocumentManagement.Data.Entities.InternalDocument", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.GeneralObjective", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.Objective", "Objective")
                        .WithOne("GeneralObjective")
                        .HasForeignKey("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.GeneralObjective", "ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objective");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.SpecificObjective", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.GeneralObjective", "AssociatedGeneralObjective")
                        .WithMany("SpecificObjectives")
                        .HasForeignKey("GeneralObjectiveId")
                        .HasPrincipalKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.Objective", "Objective")
                        .WithOne("SpecificObjective")
                        .HasForeignKey("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.SpecificObjective", "ObjectiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssociatedGeneralObjective");

                    b.Navigation("Objective");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.SpecificObjectiveFunctionary", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.SpecificObjective", "SpecificObjective")
                        .WithMany("SpecificObjectiveFunctionarys")
                        .HasForeignKey("SpecificObjectiveId")
                        .HasPrincipalKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecificObjective");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.OutgoingDocument", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.ContactDetail", "ContactDetail")
                        .WithMany()
                        .HasForeignKey("ContactDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.DeliveryDetail", "DeliveryDetails")
                        .WithMany()
                        .HasForeignKey("DeliveryDetailsId");

                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Document", "Document")
                        .WithOne("OutgoingDocument")
                        .HasForeignKey("DigitNow.Domain.DocumentManagement.Data.Entities.OutgoingDocument", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactDetail");

                    b.Navigation("DeliveryDetails");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.SpecialRegisterMapping", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Document", "Document")
                        .WithMany("SpecialRegisterMappings")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.SpecialRegister", "SpecialRegister")
                        .WithMany()
                        .HasForeignKey("SpecialRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("SpecialRegister");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.WorkflowHistoryLog", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Document", "Document")
                        .WithMany("WorkflowHistories")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.UploadedFileMapping", b =>
                {
                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.Entities.Document", null)
                        .WithMany("DocumentUploadedFiles")
                        .HasForeignKey("DocumentId");

                    b.HasOne("DigitNow.Domain.DocumentManagement.Data.UploadedFile", "UploadedFile")
                        .WithOne("UploadedFileMapping")
                        .HasForeignKey("DigitNow.Domain.DocumentManagement.Data.UploadedFileMapping", "UploadedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Actions.Action", b =>
                {
                    b.Navigation("ActionFunctionaries");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Activities.Activity", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("ActivityFunctionarys");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Document", b =>
                {
                    b.Navigation("DocumentActions");

                    b.Navigation("DocumentUploadedFiles");

                    b.Navigation("IncomingDocument");

                    b.Navigation("InternalDocument");

                    b.Navigation("OutgoingDocument");

                    b.Navigation("SpecialRegisterMappings");

                    b.Navigation("WorkflowHistories");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.IncomingDocument", b =>
                {
                    b.Navigation("ConnectedDocuments");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.GeneralObjective", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("SpecificObjectives");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.Objective", b =>
                {
                    b.Navigation("GeneralObjective");

                    b.Navigation("SpecificObjective");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.Objectives.SpecificObjective", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("SpecificObjectiveFunctionarys");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.Entities.OutgoingDocument", b =>
                {
                    b.Navigation("ConnectedDocuments");
                });

            modelBuilder.Entity("DigitNow.Domain.DocumentManagement.Data.UploadedFile", b =>
                {
                    b.Navigation("UploadedFileMapping");
                });
#pragma warning restore 612, 618
        }
    }
}
