// <auto-generated />
using System;
using DigitNow.Domain.DocumentManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ShiftIn.Domain.TenantNotification.Migrations
{
    [DbContext(typeof(DocumentManagementDbContext))]
    [Migration("20211110120233_UpdateTypes")]
    partial class UpdateTypes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("tenantnotification")
                .HasAnnotation("ProductVersion", "3.1.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShiftIn.Domain.TenantNotification.Data.NotificationStatuses.NotificationStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("NotificationStatus","tenantnotification");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            Code = "Pending",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            Code = "Approved",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            Code = "Rejected",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            Code = "Cancelled",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("ShiftIn.Domain.TenantNotification.Data.NotificationTypes.NotificationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("EntityType")
                        .HasColumnType("bigint")
                        .HasMaxLength(256);

                    b.Property<string>("Expression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInformative")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<long>("NotificationStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("TranslationLabel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("NotificationStatusId");

                    b.ToTable("NotificationType","tenantnotification");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            Code = "PendingRequesterInformativeEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = 1L,
                            IsInformative = true,
                            IsUrgent = false,
                            Name = "Pending Requester Informative Employee Request",
                            NotificationStatusId = 1L,
                            TranslationLabel = "Notification.EmployeeRequest.PendingInformativeRequester"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            Code = "PendingManagerReactiveEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = 1L,
                            IsInformative = false,
                            IsUrgent = false,
                            Name = "Pending Manager Reactive Employee Request",
                            NotificationStatusId = 1L,
                            TranslationLabel = "Notification.EmployeeRequest.PendingReactiveManager"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            Code = "CancelledRequesterInformativeEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = 1L,
                            IsInformative = true,
                            IsUrgent = false,
                            Name = "Cancelled Requester Informative Employee Request",
                            NotificationStatusId = 4L,
                            TranslationLabel = "Notification.EmployeeRequest.CancelledInformativeRequester"
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            Code = "CancelledManagerInformativeEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = 1L,
                            IsInformative = true,
                            IsUrgent = false,
                            Name = "Cancelled Manager Informative Employee Request",
                            NotificationStatusId = 4L,
                            TranslationLabel = "Notification.EmployeeRequest.CancelledInformativeManager"
                        },
                        new
                        {
                            Id = 5L,
                            Active = true,
                            Code = "ApprovedRequesterInformativeEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = 1L,
                            IsInformative = true,
                            IsUrgent = false,
                            Name = "Approved Requester Informative Employee Request",
                            NotificationStatusId = 2L,
                            TranslationLabel = "Notification.EmployeeRequest.ApprovedInformativeRequester"
                        },
                        new
                        {
                            Id = 6L,
                            Active = true,
                            Code = "ApprovedManagerInformativeEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = 1L,
                            IsInformative = true,
                            IsUrgent = false,
                            Name = "Approved Manager Informative Employee Request",
                            NotificationStatusId = 2L,
                            TranslationLabel = "Notification.EmployeeRequest.ApprovedInformativeManager"
                        },
                        new
                        {
                            Id = 7L,
                            Active = true,
                            Code = "RejectedRequesterInformativeEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = 1L,
                            IsInformative = true,
                            IsUrgent = false,
                            Name = "Rejected Requester Informative Employee Request",
                            NotificationStatusId = 3L,
                            TranslationLabel = "Notification.EmployeeRequest.RejectedInformativeRequester"
                        },
                        new
                        {
                            Id = 8L,
                            Active = true,
                            Code = "RejectedManagerInformativeEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = 1L,
                            IsInformative = true,
                            IsUrgent = false,
                            Name = "Rejected Manager Informative Employee Request",
                            NotificationStatusId = 3L,
                            TranslationLabel = "Notification.EmployeeRequest.RejectedInformativeManager"
                        });
                });

            modelBuilder.Entity("ShiftIn.Domain.TenantNotification.Data.Notifications.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EntityTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FromUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("NotificationStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("NotificationTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SeenOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Notification","tenantnotification");
                });

            modelBuilder.Entity("ShiftIn.Domain.TenantNotification.Data.NotificationTypes.NotificationType", b =>
                {
                    b.HasOne("ShiftIn.Domain.TenantNotification.Data.NotificationStatuses.NotificationStatus", "NotificationStatus")
                        .WithMany()
                        .HasForeignKey("NotificationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
