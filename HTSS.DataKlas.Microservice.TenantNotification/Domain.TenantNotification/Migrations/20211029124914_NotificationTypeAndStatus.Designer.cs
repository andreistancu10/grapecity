// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShiftIn.Domain.TenantNotification.Data;

namespace ShiftIn.Domain.TenantNotification.Migrations
{
    [DbContext(typeof(TenantNotificationDbContext))]
    [Migration("20211029124914_NotificationTypeAndStatus")]
    partial class NotificationTypeAndStatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("tenantnotification")
                .HasAnnotation("ProductVersion", "3.1.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShiftIn.Domain.TenantNotification.Data.NotificationStatuses.NotificationStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("NotificationStatus","tenantnotification");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            Code = "Pending",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            Code = "Approved",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            Code = "Rejected",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            Code = "CancelApproved",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CancelApproved"
                        });
                });

            modelBuilder.Entity("ShiftIn.Domain.TenantNotification.Data.NotificationTypes.NotificationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Expression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInformative")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("LabelForReceiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelForSender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<long>("NotificationStatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("NotificationStatusId");

                    b.ToTable("NotificationType","tenantnotification");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Active = true,
                            Code = "PendingFlowEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "EmployeeRequest",
                            IsInformative = false,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.EmployeeRequest.PendingFlow",
                            LabelForSender = "Notification.EmployeeRequest.PendingFlowSender",
                            Name = "Pending Flow Employee Request",
                            NotificationStatusId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Active = true,
                            Code = "PendingInformativeEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "EmployeeRequest",
                            IsInformative = true,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.EmployeeRequest.PendingInformativeReceiver",
                            LabelForSender = "Notification.EmployeeRequest.PendingInformativeSender",
                            Name = "Pending Informative Employee Request ",
                            NotificationStatusId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Active = true,
                            Code = "ApprovedInformativeEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "EmployeeRequest",
                            IsInformative = true,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.EmployeeRequest.ApprovedInformativeReceiver",
                            LabelForSender = "Notification.EmployeeRequest.ApprovedInformativeSender",
                            Name = "Approved Informative Employee Request",
                            NotificationStatusId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            Active = true,
                            Code = "ApprovedFlowEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "EmployeeRequest",
                            IsInformative = false,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.EmployeeRequest.PendingFlow",
                            Name = "Approved Flow Employee Request",
                            NotificationStatusId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            Active = true,
                            Code = "CancelApprovedinformativeEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "EmployeeRequest",
                            IsInformative = true,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.EmployeeRequest.CancelApprovedInformativeReceiver",
                            LabelForSender = "Notification.EmployeeRequest.CancelApprovedInformativeSender",
                            Name = "Cancel Approved informative Employee Request ",
                            NotificationStatusId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            Active = true,
                            Code = "CancelApprovedflowEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "EmployeeRequest",
                            IsInformative = false,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.EmployeeRequest.PendingFlow",
                            Name = "Cancel Approved flow Employee Request",
                            NotificationStatusId = 4L
                        },
                        new
                        {
                            Id = 7L,
                            Active = true,
                            Code = "RejectedInformativeEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "EmployeeRequest",
                            IsInformative = true,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.EmployeeRequest.RejectedInformativeReceiver",
                            LabelForSender = "Notification.EmployeeRequest.RejectedInformativeSender",
                            Name = "Rejected Informative Employee Request",
                            NotificationStatusId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            Active = true,
                            Code = "RejectedFlowEmployeeRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "EmployeeRequest",
                            IsInformative = false,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.EmployeeRequest.PendingFlow",
                            Name = "Rejected Flow Employee Request",
                            NotificationStatusId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            Active = true,
                            Code = "PendingInformativeLocationProgram",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "LocationProgram",
                            IsInformative = true,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.LocationProgram.PendingInformativeForReceiver",
                            LabelForSender = "Notification.LocationProgram.PendingInformativeForSender",
                            Name = "Pending Informative Location Program ",
                            NotificationStatusId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            Active = true,
                            Code = "PendingFlowCoverGapRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "CoverGapRequest",
                            IsInformative = false,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.CoverGapRequest.PendingFlow",
                            LabelForSender = "Notification.CoverGapRequest.PendingFlowSender",
                            Name = "Pending Flow CoverGap Request",
                            NotificationStatusId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            Active = true,
                            Code = "PendingInformativeCoverGapRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "CoverGapRequest",
                            IsInformative = true,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.CoverGapRequest.PendingInformativeReceiver",
                            LabelForSender = "Notification.CoverGapRequest.PendingInformativeSender",
                            Name = "Pending Informative CoverGap Request ",
                            NotificationStatusId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            Active = true,
                            Code = "ApprovedFlowCoverGapRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "CoverGapRequest",
                            IsInformative = false,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.CoverGapRequest.ApprovedFlow",
                            LabelForSender = "Notification.CoverGapRequest.ApprovedFlowSender",
                            Name = "Approved Flow CoverGap Request",
                            NotificationStatusId = 2L
                        },
                        new
                        {
                            Id = 13L,
                            Active = true,
                            Code = "ApprovedInformativeCoverGapRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "CoverGapRequest",
                            IsInformative = true,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.CoverGapRequest.ApprovedInformativeReceiver",
                            LabelForSender = "Notification.CoverGapRequest.ApprovedInformativeSender",
                            Name = "Approved Informative CoverGap Request",
                            NotificationStatusId = 2L
                        },
                        new
                        {
                            Id = 14L,
                            Active = true,
                            Code = "CanceledBySourceFlowCoverGapRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "CoverGapRequest",
                            IsInformative = false,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.CoverGapRequest.CanceledBySourceFlow",
                            Name = "Canceled By Source Flow CoverGap Request ",
                            NotificationStatusId = 4L
                        },
                        new
                        {
                            Id = 15L,
                            Active = true,
                            Code = "CanceledBySourceInformativeCoverGapRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "CoverGapRequest",
                            IsInformative = true,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.CoverGapRequest.CanceledBySourceInformativeReceiver",
                            LabelForSender = "Notification.CoverGapRequest.CanceledBySourceInformativeSender",
                            Name = "Canceled By Source Informative CoverGap Request ",
                            NotificationStatusId = 4L
                        },
                        new
                        {
                            Id = 16L,
                            Active = true,
                            Code = "CanceledByTargetFlowCoverGapRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "CoverGapRequest",
                            IsInformative = false,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.CoverGapRequest.CanceledByTargetFlow",
                            Name = "Canceled By Target Flow CoverGap Request ",
                            NotificationStatusId = 4L
                        },
                        new
                        {
                            Id = 17L,
                            Active = true,
                            Code = "CanceledByTargetInformativeCoverGapRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "CoverGapRequest",
                            IsInformative = true,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.CoverGapRequest.CanceledByTargetInformativeReceiver",
                            LabelForSender = "Notification.CoverGapRequest.CanceledByTargetInformativeSender",
                            Name = "Canceled By Target Informative CoverGap Request ",
                            NotificationStatusId = 4L
                        },
                        new
                        {
                            Id = 18L,
                            Active = true,
                            Code = "RejectApprovedFlowCoverGapRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "CoverGapRequest",
                            IsInformative = false,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.CoverGapRequest.RejectApprovedFlow",
                            Name = "Reject Approved Flow CoverGap Request",
                            NotificationStatusId = 3L
                        },
                        new
                        {
                            Id = 19L,
                            Active = true,
                            Code = "RejectApprovedInformativeCoverGapRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "CoverGapRequest",
                            IsInformative = true,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.CoverGapRequest.RejectApprovedInformativeReceiver",
                            LabelForSender = "Notification.CoverGapRequest.RejectApprovedInformativeSender",
                            Name = "Reject Approved Informative CoverGap Request ",
                            NotificationStatusId = 3L
                        },
                        new
                        {
                            Id = 20L,
                            Active = true,
                            Code = "RejectedByIneligibilityFlowCoverGapRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "CoverGapRequest",
                            IsInformative = false,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.CoverGapRequest.RejectedByIneligibilityFlow",
                            Name = "Rejected By Ineligibility Flow CoverGap Request ",
                            NotificationStatusId = 3L
                        },
                        new
                        {
                            Id = 21L,
                            Active = true,
                            Code = "RejectedByIneligibilityInformativeCoverGapRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "CoverGapRequest",
                            IsInformative = true,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.CoverGapRequest.RejectedByIneligibilityInformativeReceiver",
                            LabelForSender = "Notification.CoverGapRequest.RejectedByIneligibilityInformativeSender",
                            Name = "Rejected By Ineligibility Informative CoverGap Request",
                            NotificationStatusId = 3L
                        },
                        new
                        {
                            Id = 22L,
                            Active = true,
                            Code = "RejectedByExpiredTimeFlowCoverGapRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "CoverGapRequest",
                            IsInformative = false,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.CoverGapRequest.RejectedByExpiredTimeFlow",
                            Name = "Rejected By Expired Time Flow CoverGap Request",
                            NotificationStatusId = 3L
                        },
                        new
                        {
                            Id = 23L,
                            Active = true,
                            Code = "RejectedByExpiredTimeInformativeCoverGapRequest",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "CoverGapRequest",
                            IsInformative = true,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.CoverGapRequest.RejectedByExpiredTimeInformativeReceiver",
                            LabelForSender = "Notification.CoverGapRequest.RejectedByExpiredTimeInformativeSender",
                            Name = "Rejected By Expired Time Informative CoverGap Request",
                            NotificationStatusId = 3L
                        },
                        new
                        {
                            Id = 24L,
                            Active = true,
                            Code = "PendingInformativeBusinessObjectives",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntityType = "BusinessObjectives",
                            IsInformative = true,
                            IsUrgent = false,
                            LabelForReceiver = "Notification.BusinessObjectives.PendingInformativeForReceiver",
                            LabelForSender = "Notification.BusinessObjectives.PendingInformativeForSender",
                            Name = "Pending Informative Business Objectives",
                            NotificationStatusId = 1L
                        });
                });

            modelBuilder.Entity("ShiftIn.Domain.TenantNotification.Data.Notifications.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EntityTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FromUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("NotificationStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("NotificationTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SeenOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Notification","tenantnotification");
                });

            modelBuilder.Entity("ShiftIn.Domain.TenantNotification.Data.NotificationTypes.NotificationType", b =>
                {
                    b.HasOne("ShiftIn.Domain.TenantNotification.Data.NotificationStatuses.NotificationStatus", "NotificationStatus")
                        .WithMany()
                        .HasForeignKey("NotificationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
